# This file is Public Domain, do as you please

if(CMAKE_VERSION VERSION_GREATER_EQUAL "3.20")
  set(_prefix "${CMAKE_CURRENT_LIST_DIR}/@RELPATH@/")
  cmake_path(ABSOLUTE_PATH _prefix NORMALIZE)
else()
  get_filename_component(_prefix "${CMAKE_CURRENT_LIST_DIR}/@RELPATH@/" ABSOLUTE)
endif()

if(NOT CMAKE_SYSTEM_NAME AND NOT CMAKE_HOST_WIN32)
  set(CMAKE_SYSTEM_NAME Windows)
endif()

if(LLVM_TOOLCHAIN_SYSTEM_PROCESSOR)
  # LLVM_TOOLCHAIN_SYSTEM_PROCESSOR saves the toolchains default architecture
  # CMake will invoke the toolchain-file during various steps,
  # make sure the definition always agrees.
  set(CMAKE_SYSTEM_PROCESSOR ${LLVM_TOOLCHAIN_SYSTEM_PROCESSOR})
elseif(CMAKE_HOST_WIN32 AND NOT CMAKE_SYSTEM_PROCESSOR)
  # inspect clang's default target architecture
  # should only run into this branch the first pass
  execute_process(COMMAND "${_prefix}bin/clang.exe" -dumpmachine
    RESULT_VARIABLE cresult
    OUTPUT_VARIABLE _respath
    OUTPUT_STRIP_TRAILING_WHITESPACE
  )
  if(NOT cresult EQUAL 0)
    message(FATAL_ERROR "\"${_prefix}bin/clang.exe\" -dumpmachine: failed with ${cresult}")
  endif()
  unset(cresult)

  string(REGEX REPLACE "-.*" "" CMAKE_SYSTEM_PROCESSOR "${_respath}")
  # save the value for later and tell CMake its important to pass to future invokations
  set(LLVM_TOOLCHAIN_SYSTEM_PROCESSOR ${CMAKE_SYSTEM_PROCESSOR})
  set(CMAKE_TRY_COMPILE_PLATFORM_VARIABLES LLVM_TOOLCHAIN_SYSTEM_PROCESSOR)
  # If you encounter build/runtime issues, this might be relevant information
  message(VERBOSE "llvm-mingw_toolchainfile: using Target CPU ${CMAKE_SYSTEM_PROCESSOR} on Host CPU ${CMAKE_HOST_SYSTEM_PROCESSOR}")
elseif(NOT CMAKE_SYSTEM_PROCESSOR)
  set(CMAKE_SYSTEM_PROCESSOR ${CMAKE_HOST_SYSTEM_PROCESSOR})
endif()

set(_sysroot "${_prefix}${CMAKE_SYSTEM_PROCESSOR}-w64-mingw32")
message("CMAKE_HOST_WIN32 ${CMAKE_HOST_WIN32}")
if(NOT CMAKE_HOST_WIN32)
  # Not setting CMAKE_SYSROOT on Windows. In the case of toolchains on
  # Windows, the headers are in ${_prefix}include (and not symlinked into
  # ${_sysroot}include), and won't be found if we pass the sysroot parameter
  # to the compiler.
endif()

# cmake-style list of paths
set(_respath "${_sysroot}/lib/pkgconfig" "${_sysroot}/share/pkgconfig")

if(CMAKE_VERSION VERSION_GREATER_EQUAL "3.20")
  cmake_path(CONVERT "${_respath}" TO_NATIVE_PATH_LIST _respath)
  set(ENV{PKG_CONFIG_LIBDIR} "${_respath}")
else()
  if(CMAKE_HOST_WIN32)
    file(TO_NATIVE_PATH "${_respath}" _respath)
  else()
    string(REPLACE ";" ":" _respath "${_respath}")
  endif()
  set(ENV{PKG_CONFIG_LIBDIR} "${_respath}")
endif()

# set these before find_program!
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

set(_exesuff)
if(CMAKE_HOST_WIN32)
  set(_exesuff .exe)
endif()
set(CMAKE_ASM_COMPILER "${_prefix}bin/clang${_exesuff}")
set(CMAKE_C_COMPILER "${_prefix}bin/clang${_exesuff}")
set(CMAKE_CXX_COMPILER "${_prefix}bin/clang++${_exesuff}")
set(CMAKE_RC_COMPILER "${_prefix}bin/llvm-rc${_exesuff}")
unset(_exesuff)

unset(_prefix)
unset(_respath)
unset(_sysroot)

set(CMAKE_C_COMPILER_TARGET ${CMAKE_SYSTEM_PROCESSOR}-w64-mingw32)
set(CMAKE_CXX_COMPILER_TARGET ${CMAKE_C_COMPILER_TARGET})
set(CMAKE_ASM_COMPILER_TARGET ${CMAKE_C_COMPILER_TARGET})
