FROM ubuntu:16.04

RUN apt-get update -qq && apt-get install -qqy \
    git wget bzip2 file unzip libtool pkg-config cmake build-essential \
    automake yasm gettext autopoint vim python git-svn ninja-build \
    subversion && \
    apt-get clean -y && \
    rm -rf /var/lib/apt/lists/*


RUN git config --global user.name "LLVM MinGW" && \
    git config --global user.email root@localhost

WORKDIR /build

ARG CORES=4

ENV TOOLCHAIN_PREFIX=/opt/llvm-mingw

# Build LLVM
COPY build-llvm.sh .
RUN ./build-llvm.sh $TOOLCHAIN_PREFIX

# Strip the LLVM install output immediately. (This doesn't reduce the
# total docker image size as long as it is in a separate RUN layer though,
# but reduces build times if tweaking the contents of strip-llvm.sh.)
# Most of the size of the docker image comes from the build directory that
# we keep in any case.
COPY strip-llvm.sh .
RUN ./strip-llvm.sh $TOOLCHAIN_PREFIX

ARG TOOLCHAIN_ARCHS="i686 x86_64 armv7 aarch64"

# Install the usual $TUPLE-clang binaries
COPY wrappers/*.sh wrappers/*.c ./wrappers/
COPY install-wrappers.sh .
RUN ./install-wrappers.sh $TOOLCHAIN_PREFIX

# Build MinGW-w64
COPY build-mingw-w64.sh build-mingw-w64-widl.sh ./
RUN ./build-mingw-w64.sh $TOOLCHAIN_PREFIX

# Build compiler-rt
COPY build-compiler-rt.sh .
RUN ./build-compiler-rt.sh $TOOLCHAIN_PREFIX

# Build mingw-w64's extra libraries
COPY build-mingw-w64-libraries.sh .
RUN ./build-mingw-w64-libraries.sh $TOOLCHAIN_PREFIX

# Build C test applications
ENV PATH=$TOOLCHAIN_PREFIX/bin:$PATH

COPY test/*.c test/*.h ./test/
RUN cd test && \
    for arch in $TOOLCHAIN_ARCHS; do \
        mkdir -p $arch && \
        for test in hello hello-tls crt-test setjmp; do \
            $arch-w64-mingw32-clang $test.c -o $arch/$test.exe || exit 1; \
        done; \
        for test in autoimport-lib; do \
            $arch-w64-mingw32-clang $test.c -shared -o $arch/$test.dll -Wl,--out-implib,$arch/lib$test.dll.a || exit 1; \
        done; \
        for test in autoimport-main; do \
            $arch-w64-mingw32-clang $test.c -o $arch/$test.exe -L$arch -l${test%-main}-lib || exit 1; \
        done; \
    done

# Build libunwind/libcxxabi/libcxx
COPY build-libcxx.sh merge-archives.sh ./
RUN ./build-libcxx.sh $TOOLCHAIN_PREFIX

# Build C++ test applications
COPY test/*.cpp ./test/
RUN cd test && \
    for arch in $TOOLCHAIN_ARCHS; do \
        mkdir -p $arch && \
        for test in hello-cpp hello-exception tlstest-main exception-locale; do \
            $arch-w64-mingw32-clang++ $test.cpp -o $arch/$test.exe || exit 1; \
        done; \
        for test in tlstest-lib; do \
            $arch-w64-mingw32-clang++ $test.cpp -shared -o $arch/$test.dll || exit 1; \
        done; \
    done

# Build sanitizers. Ubsan includes <typeinfo> from the C++ headers, so
# we need to build this after libcxx.
RUN ./build-compiler-rt.sh $TOOLCHAIN_PREFIX --build-sanitizers

# Sanitizers on windows only support x86.
RUN cd test && \
    for arch in $TOOLCHAIN_ARCHS; do \
        case $arch in \
        i686|x86_64) \
            ;; \
        *) \
            continue \
            ;; \
        esac && \
        for test in stacksmash; do \
            $arch-w64-mingw32-clang $test.c -o $arch/$test-asan.exe -fsanitize=address -g -gcodeview -Wl,-pdb,$arch/$test-asan.pdb || exit 1; \
        done; \
    done

# Build libssp
COPY build-libssp.sh libssp-Makefile ./
RUN ./build-libssp.sh $TOOLCHAIN_PREFIX

RUN cd test && \
    for arch in $TOOLCHAIN_ARCHS; do \
        mkdir -p $arch && \
        for test in stacksmash; do \
            $arch-w64-mingw32-clang $test.c -o $arch/$test.exe -fstack-protector-strong || exit 1; \
        done; \
    done

RUN cd test && \
    for arch in $TOOLCHAIN_ARCHS; do \
        cp $TOOLCHAIN_PREFIX/$arch-w64-mingw32/bin/*.dll $arch || exit 1; \
    done

# Cheating: Pull strip and objcopy from the normal binutils package.
RUN apt-get update -qq && \
    apt-get install -qqy binutils-mingw-w64-x86-64 && \
    cp /usr/bin/x86_64-w64-mingw32-strip $TOOLCHAIN_PREFIX/bin/binutils-strip && \
    cp /usr/bin/x86_64-w64-mingw32-objcopy $TOOLCHAIN_PREFIX/bin/binutils-objcopy && \
    apt-get remove -qqy binutils-mingw-w64-x86-64 && \
    apt-get clean -y && \
    rm -rf /var/lib/apt/lists/*

RUN wget http://www.nasm.us/pub/nasm/releasebuilds/2.13.01/nasm-2.13.01.tar.xz && \
    tar -Jxvf nasm-2.13.01.tar.xz && \
    cd nasm-2.13.01 && \
    ./configure --prefix=$TOOLCHAIN_PREFIX && \
    make -j$CORES && \
    make install

COPY winemine/ ./winemine/
# We must build winemine with ucrtbase regardless of what the default is,
# since the arm msvcrt.dll (or the def file in mingw-w64 at least) doesn't
# include _winitenv.
RUN mkdir -p /build/demo/bin && \
    cd winemine && \
    for arch in $TOOLCHAIN_ARCHS; do \
        mkdir build-$arch && \
        cd build-$arch && \
        make -f ../Makefile CROSS=$arch-w64-mingw32- && \
        $arch-w64-mingw32-strip winemine.exe && \
        cp winemine.exe /build/demo/bin/winemine-$arch.exe && \
        cd .. || exit 1; \
    done

ENV TEST_ARCH=x86_64
ENV TEST_TRIPLET=$TEST_ARCH-w64-mingw32
ENV TEST_ROOT=/build/demo
ENV PKG_CONFIG_LIBDIR=/build/demo/lib/pkgconfig

RUN git clone http://git.xiph.org/speex.git/ && \
    cd speex && \
    git checkout 243470fb39e8a5712b5d01c3bf5631081a640a0d && \
    ./autogen.sh

RUN cd speex && \
    ./configure --prefix=$TEST_ROOT --host=$TEST_TRIPLET --enable-shared && \
    make -j4 && \
    make install

RUN git clone git://git.videolan.org/x264.git && \
    cd x264 && \
    git checkout 545de2ffec6ae9a80738de1b2c8cf820249a2530

RUN cd x264 && \
    CC="$TEST_TRIPLET-gcc" STRIP="" AR="llvm-ar" RANLIB="llvm-ranlib" ./configure --host=$TEST_TRIPLET --enable-shared --prefix=$TEST_ROOT && \
    make -j4 && \
    make install

RUN git clone git://git.libav.org/libav.git && \
    cd libav && \
    git checkout c6558e8840fbb2386bf8742e4d68dd6e067d262e

RUN cd libav && \
    mkdir build && cd build && \
    ../configure --prefix=$TEST_ROOT --arch=$TEST_ARCH --target-os=mingw32 --cross-prefix=$TEST_TRIPLET- --enable-cross-compile --enable-gpl --enable-shared --enable-libspeex --enable-libx264 --pkg-config=pkg-config --extra-cflags="-DX264_API_IMPORTS" && \
    make -j4 && \
    make install

RUN wget https://gmplib.org/download/gmp/gmp-6.1.2.tar.xz && \
    tar -Jxvf gmp-6.1.2.tar.xz

RUN cd gmp-6.1.2 && \
    ./configure --prefix=$TEST_ROOT --host=$TEST_TRIPLET --enable-shared --disable-static --with-pic && \
    make -j4 && \
    make install

RUN wget https://ftp.gnu.org/gnu/nettle/nettle-3.3.tar.gz && \
    tar -zxvf nettle-3.3.tar.gz

RUN cd nettle-3.3 && \
    ./configure --prefix=$TEST_ROOT --host=$TEST_TRIPLET --enable-shared --with-include-path=$TEST_ROOT/include --with-lib-path=$TEST_ROOT/lib && \
    make -j4 && \
    make install

RUN wget http://zlib.net/zlib-1.2.11.tar.gz && \
    tar -zxvf zlib-1.2.11.tar.gz

RUN cd zlib-1.2.11 && \
    make -f win32/Makefile.gcc PREFIX=$TEST_TRIPLET- SHARED_MODE=1 -j4 && \
    make -f win32/Makefile.gcc install SHARED_MODE=1 INCLUDE_PATH=$TEST_ROOT/include LIBRARY_PATH=$TEST_ROOT/lib BINARY_PATH=$TEST_ROOT/bin

RUN wget https://www.gnupg.org/ftp/gcrypt/gnutls/v3.5/gnutls-3.5.11.tar.xz && \
    tar -Jxvf gnutls-3.5.11.tar.xz

RUN cd gnutls-3.5.11 && \
    ./configure --prefix=$TEST_ROOT --host=$TEST_TRIPLET --enable-shared GMP_CFLAGS=-I\$$TEST_ROOT/include GMP_LIBS=-lgmp --with-included-libtasn1 --with-included-unistring --disable-cxx --enable-local-libopts --without-p11-kit --disable-tests --disable-doc --disable-tools && \
    make -j4 && \
    make install

RUN wget https://curl.haxx.se/download/curl-7.56.1.tar.xz && \
    tar -Jxvf curl-7.56.1.tar.xz

RUN cd curl-7.56.1 && \
    ./configure --prefix=$TEST_ROOT --host=$TEST_TRIPLET --enable-shared --with-gnutls=$TEST_ROOT --with-zlib=$TEST_ROOT && \
    make -j4 && \
    make install

RUN wget http://download.qt.io/official_releases/qt/5.11/5.11.0/submodules/qtbase-everywhere-src-5.11.0.tar.xz && \
    tar -Jxvf qtbase-everywhere-src-5.11.0.tar.xz

RUN cd qtbase-everywhere-src-5.11.0 && \
    ./configure -xplatform win32-clang-g++ -device-option CROSS_COMPILE=$TEST_TRIPLET- -release -opensource -confirm-license -no-opengl -nomake examples -silent -prefix $TEST_ROOT && \
    make -j4 && \
    make install

RUN for exec in moc qmake rcc uic; do \
        cp /build/demo/bin/$exec /build/prefix/bin; \
    done

RUN mkdir -p /build/demo/bin/platforms && \
    cp /build/demo/plugins/platforms/qwindows.dll /build/demo/bin/platforms

RUN cd qtbase-everywhere-src-5.11.0/examples/widgets/widgets/analogclock && \
    /build/demo/bin/qmake && \
    make -j4 && \
    cp release/analogclock.exe /build/demo/bin
